import cv2
import numpy as np
import pickle
import os

ENCODINGS_PATH = "face_encodings.pickle" 
TOLERANCE = 0.6

def cosine_similarity_manual(a, b):
    """Manual cosine similarity calculation"""
    dot_product = np.dot(a, b)
    norm_a = np.linalg.norm(a)
    norm_b = np.linalg.norm(b)
    if norm_a == 0 or norm_b == 0:
        return 0
    return dot_product / (norm_a * norm_b)

def extract_face_features(image):
    """Extract face features using OpenCV face detection"""
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Load face cascade classifier
    cascade_path = r"C:\Users\anura\Desktop\face recognition\backend\.venv\Lib\site-packages\cv2\data\haarcascade_frontalface_default.xml"
    
    face_cascade = cv2.CascadeClassifier(cascade_path)
    
    if face_cascade.empty():
        print("Error: Could not load face cascade classifier")
        return [], []
    
    faces = face_cascade.detectMultiScale(gray, 1.3, 5, minSize=(30, 30))
    
    face_encodings = []
    face_locations = []
    
    for (x, y, w, h) in faces:
        # Extract face ROI
        face_roi = gray[y:y+h, x:x+w]
        
        # Resize to standard size
        face_roi = cv2.resize(face_roi, (64, 64))
        
        # Simple feature extraction using pixel intensities and basic statistics
        features = []
        
        # Add pixel intensities (downsampled)
        downsampled = cv2.resize(face_roi, (8, 8)).flatten()
        features.extend(downsampled)
        
        # Add histogram features
        hist = cv2.calcHist([face_roi], [0], None, [16], [0, 256])
        features.extend(hist.flatten())
        
        # Add simple statistical features
        features.extend([
            np.mean(face_roi),
            np.std(face_roi),
            np.median(face_roi),
            np.min(face_roi),
            np.max(face_roi)
        ])
        
        # Convert to numpy array and normalize
        features = np.array(features, dtype=np.float32)
        if np.linalg.norm(features) > 0:
            features = features / np.linalg.norm(features)
        
        face_encodings.append(features)
        face_locations.append((y, x+w, y+h, x))  # top, right, bottom, left
    
    return face_locations, face_encodings

def load_face_database():
    """Load the face database"""
    if not os.path.exists(ENCODINGS_PATH):
        return [], []
    
    with open(ENCODINGS_PATH, "rb") as f:
        data = pickle.load(f)
    return data["encodings"], data["names"]

def recognize_face(face_encoding, known_encodings, known_names, tolerance=TOLERANCE):
    """Recognize a face using cosine similarity"""
    if not known_encodings:
        return "Unknown"
    
    # Compute similarities with all known faces
    similarities = []
    for known_encoding in known_encodings:
        similarity = cosine_similarity_manual(face_encoding, known_encoding)
        similarities.append(similarity)
    
    similarities = np.array(similarities)
    best_idx = np.argmax(similarities)
    best_similarity = similarities[best_idx]
    
    # Convert similarity to distance (1 - similarity)
    distance = 1 - best_similarity
    
    if distance <= tolerance:
        name = known_names[best_idx]
    else:
        name = "Unknown"
    
    return name

def main():
    """Main real-time face recognition function"""
    # Load face database
    known_encodings, known_names = load_face_database()
    
    if not known_encodings:
        print("No face database found! Please run face_encoder.py first.")
        return
    
    print(f"Loaded {len(known_encodings)} face encodings for recognition.")
    print("Press 'q' to quit.")
    
    # Initialize camera
    cap = cv2.VideoCapture(0)
    
    # Check if camera opened successfully
    if not cap.isOpened():
        print("Error: Could not open camera.")
        return
    
    # Set camera properties for better performance
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
    cap.set(cv2.CAP_PROP_FPS, 30)
    
    frame_count = 0
    process_every_n_frames = 3  # Process every 3rd frame for better performance
    results = []  # Initialize results list
    
    while True:
        # Capture frame
        ret, frame = cap.read()
        if not ret:
            print("Failed to capture frame")
            break
        
        frame_count += 1
        
        # Process every n-th frame to improve performance
        if frame_count % process_every_n_frames == 0:
            # Extract face features from current frame
            face_locations, face_encodings = extract_face_features(frame)
            
            # Store results for display
            results = []
            for (face_location, face_encoding) in zip(face_locations, face_encodings):
                # Recognize the face
                name = recognize_face(face_encoding, known_encodings, known_names)
                results.append((face_location, name))
        
        # Display results (use last processed results)
        for (face_location, name) in results:
            # Draw rectangle around face
            top, right, bottom, left = face_location
            color = (0, 255, 0) if name != "Unknown" else (0, 0, 255)
            
            # Draw rectangle
            cv2.rectangle(frame, (left, top), (right, bottom), color, 2)
            
            # Draw label
            label = name
            label_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.8, 2)[0]
            
            # Draw background rectangle for label
            cv2.rectangle(frame, (left, bottom - label_size[1] - 15), 
                         (left + label_size[0] + 10, bottom), color, cv2.FILLED)
            
            # Draw label text
            cv2.putText(frame, label, (left + 5, bottom - 8), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)        # Display frame
        cv2.imshow('Face Recognition System', frame)
        
        # Check for quit
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    
    # Release resources
    cap.release()
    cv2.destroyAllWindows()
    print("Face recognition system stopped.")

if __name__ == "__main__":
    main()
